#!/usr/bin/env node
/**
 * Created by ikonovalov on 22/06/17.
 */
'use strict';
require('colors');


const
    commandLineArgs = require('command-line-args'),
    cliOptions = require('../src/cli-options'),
    fs = require('fs'),
    async = require('async'),
    path = require('path'),
    cryptoTool = require('../src/cryptoTool'),
    output = require('../src/output'),
    multihash = require('multihashes');

const
    optionDefinitions = cliOptions.definitions,
    options = commandLineArgs(optionDefinitions);

//=========================================================
// print version only
if (options.version) {
    output.printVersionAndExit();
}

// print help only
if (options.help) {
    output.printHelpAndExit();
}

// Check parameters
cliOptions.checkMandatoryOptions(options);

let tagPath = path.resolve(options.tag);
let encryptedFilePath = path.resolve(options.file);
let publicKeyPath = path.resolve(options.public);
let decryptedOutput = path.resolve(options.output);

console.log(`Tag path ${tagPath}`);
console.log(`Encrypted file path ${encryptedFilePath}`);
console.log(`Public key path ${publicKeyPath}`);


async.series(
    [
        callback => fs.readFile(tagPath, callback),
        callback => fs.readFile(publicKeyPath, callback)
    ],
    (error, result) => {
        if (error) { console.log(error); process.exit(1)}
        let tag = JSON.parse(result[0].toString());
        let publicKeyHex = result[1].toString();
        let secKeyBuf = Buffer.from(tag.secret, 'hex');
        let decryptOptions = {algorithm: tag.algorithm, iv:  Buffer.from(tag.iv, 'hex')};

        console.log(`Tag:\n${JSON.stringify(tag, null, 2)}`);
        console.log(`Public key: [${publicKeyHex}]`);

        let encryptedStream = fs.createReadStream(encryptedFilePath);
        let encryptedStreamHashing = fs.createReadStream(encryptedFilePath);
        let decryptedStream = fs.createWriteStream(decryptedOutput);
        async.series([
            callback => cryptoTool.verifyByTag(tag, publicKeyHex, callback),
            callback => cryptoTool.decryptStream(encryptedStream, decryptedStream, secKeyBuf, decryptOptions, callback),
            callback => cryptoTool.dagHash(encryptedStreamHashing, '/ip4/127.0.0.1/tcp/5001', callback)
        ], (error, results) => {
            let verificationResult = results[0];
            let decryptMsg = results[1];
            let derivedQmHash = results[2][0].hash;

            console.log(`Signature verification result: ${verificationResult ? '[VALID]' : '[INVALID]'}`);
            console.log(`Decrypted file location: ${decryptedOutput}`);
            console.log(`Derived digest in multihash format:\t${derivedQmHash}`);
            console.log(`Tag digest in multihash format:\t\t${tag.ipfs}`);
        });
    });

